select 
processing.base58_encode('TR', t.id) as "Finix Payment ID",
       processing.base58_encode('MU', m.id) as "Finix Merchant ID",
       '"' || m.mid || '"' as MID,
       m.default_statement_descriptor as "Statement Descriptor",
       case
           when a.id is null then 'SALE'
           else 'CAPTURE'
       end as "Transaction Type",
       t.created_at at time zone 'UTC' at time zone 'America/New_York' as "Date/Time (EST)", -- t.code as "Status",
 d.model as "Device Model",
 d.serial_number as "Serial Number",
 t.amount as "Amount", -- COALESCE(
 --     (regexp_replace(t.params::text, '\\u0000', '', 'g'))::jsonb -> 'processor' -> 'response' -> 'raw_response' -> '_processor' ->> 'express_response_message',
 (regexp_replace(t.params::text, '\\u0000', '', 'g'))::jsonb -> 'processor' -> 'response' -> 'raw_response' ->> 'status_code' as "TriPOS Status Code",
 REPLACE(SUBSTRING((regexp_replace(t.params::text, '\\u0000', '', 'g'))::jsonb -> 'processor' -> 'result' -> 'raw_result' -> '_errors' -> 0 ->> 'developer_message'
from 
'PinPadError.*?\r'),
 E'\n', ' ') as "Error Message" -- (regexp_replace(t.params::text, '\\u0000', '', 'g'))::jsonb -> 'processor' -> 'response' -> 'raw_response' -> 'account_number' as "Account Number",
 -- (regexp_replace(t.params::text, '\\u0000', '', 'g'))::jsonb -> 'processor' -> 'response' -> 'raw_response' -> 'entry_mode' as "Entry Mode"
from processing.transfers t
join processing.device d on t.device_id = d.id
join processing.merchants m on t.merchant_id = m.id
left join processing.authorizations a on t.id = a.transfer_id
where t.platform_id = 'b2dae081-8bde-44bf-9429-bc2b16e3bdd8'
    and m.processor_gateway = 'TRIPOS_CLOUD_V1'
    and t.created_at > now() - interval '45 days'
    and t.type not in ('SETTLEMENT',
                       'FEE')
    and t.code = 'FAILED' 
    and (regexp_replace(t.params::text, '\\u0000', '', 'g'))::jsonb -> 'processor' -> 'result' -> 'raw_result' -> '_errors' -> 0 ->> 'developer_message' ilike '%Url /socketapi/gateway/sendasync is invalid%'
union
select processing.base58_encode('AU', t.id) as "Finix Payment ID",
       processing.base58_encode('MU', m.id) as "Finix Merchant ID",
       '"' || m.mid || '"' as MID,
       m.default_statement_descriptor as "Statement Descriptor",
       'AUTHORIZATION' as "Transaction Type",
       t.created_at at time zone 'UTC' at time zone 'America/New_York' as "Date/Time (EST)", -- t.code as "Status",
 d.model as "Device Model",
 d.serial_number as "Serial Number",
 t.amount as "Amount", -- COALESCE(
 --(regexp_replace(t.params::text, '\\u0000', '', 'g'))::jsonb -> 'processor' -> 'response' -> 'raw_response' -> '_processor' ->> 'express_response_message',
 (regexp_replace(t.params::text, '\\u0000', '', 'g'))::jsonb -> 'processor' -> 'submission_response' -> 'raw_response' ->> 'status_code' as "TriPOS Status Code",
 REPLACE(SUBSTRING((regexp_replace(t.params::text, '\\u0000', '', 'g'))::jsonb -> 'processor' -> 'submission_response' -> 'raw_response' -> '_errors' -> 0 ->> 'developer_message'
from 
'PinPadError.*?\r'),
 E'\n',' ') as "Error Message" -- (regexp_replace(t.params::text, '\\u0000', '', 'g'))::jsonb -> 'processor' -> 'response' -> 'raw_response' -> 'account_number' as "Account Number",
 -- (regexp_replace(t.params::text, '\\u0000', '', 'g'))::jsonb -> 'processor' -> 'response' -> 'raw_response' -> 'entry_mode' as "Entry Mode"
from processing.authorizations t
join processing.device d on t.device_id = d.id
join processing.merchants m on t.merchant_id = m.id
where t.platform_id = 'b2dae081-8bde-44bf-9429-bc2b16e3bdd8'
    and m.processor_gateway = 'TRIPOS_CLOUD_V1'
    and t.created_at > now() - interval '45 days'
    and t.code = 'FAILED'
    and (regexp_replace(t.params::text, '\\u0000', '', 'g'))::jsonb -> 'processor' -> 'result' -> 'raw_result' -> '_errors' -> 0 ->> 'developer_message' ilike '%Url /socketapi/gateway/sendasync is invalid%'
order by "Date/Time (EST)" asc;





Updated where cluase to : where t.platform_id in('b2dae081-8bde-44bf-9429-bc2b16e3bdd8', 'a2b702de-56c6-4078-b3e9-8131547d88fd')


Got back two results